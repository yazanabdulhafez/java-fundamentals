/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class Library {

    //this is the main method.
    public static void main(String[] args) {
        int[] randomArr = roll(4);
        System.out.println("random array= " + Arrays.toString(randomArr));
        System.out.println("containsDuplicates: " + containsDuplicates(randomArr));
        int[] array = {66, 64, 58, 65, 71, 57, 60};
        System.out.println("average= " + calculateAverage(array));
        int[] array1 = {57, 65, 65, 70, 72, 65, 51};
        System.out.println("average= " + calculateAverage(array1));
        int[] array2 = {55, 54, 60, 53, 59, 57, 61};
        System.out.println("average= " + calculateAverage(array2));
        int[] array3 = {65, 56, 55, 52, 55, 62, 57};
        System.out.println("average= " + calculateAverage(array3));
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        System.out.println("lowest average array= " +
                Arrays.toString(getBackLowAvgArray(weeklyMonthTemperatures)));
        System.out.println(analyzingWeatherData(weeklyMonthTemperatures));

        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    //this is the roll of dice method.
    public static int[] roll(int n) { //----------n:number of dice rolls.
        int[] randomArray = new int[n]; //--------initialize the array
        for (int i = 0; i < n; i++) {
            int rand = ThreadLocalRandom.current().nextInt(1, 6);//---get random number between bounds.
            randomArray[i] = rand;
        }
        return randomArray;


    }

    //this is a method that check if the rolling array contain duplicated values.

    public static boolean containsDuplicates(int[] array) {

        for (int i = 0; i < array.length; i++) { //first loop
            for (int j = 0; j < array.length; j++) { //second loop
                if (array[i] == (array[j]) && i != j) {  //comparison between elements
                    return true;
                }
            }
        }
        return false;

    }

    //this is a method to calculate the average value.
    public static double calculateAverage(int[] array) {
        double total = 0; //initialize the total.
        for (int j : array) {
            total += j;       //find the total
        }
        return total / array.length; //return the average
    }

    //this method to find the lowest average value array and return it.
    public static int[] getBackLowAvgArray(int[][] arrays) {

        double[] averagesArray = new double[arrays.length];//initialize the array that contain the averages.

        for (int i = 0; i < arrays.length; i++) {
            double result = calculateAverage(arrays[i]); //find the average for each array inside the main array.
            averagesArray[i] = result;
        }
        System.out.println("array of the averages" + Arrays.toString(averagesArray));
        double minValue = 100;
        int minValueIndex = 0;
        for (int i = 0; i < averagesArray.length; i++) {  //find the minimum average and return its index.
            if (averagesArray[i] < minValue) {
                minValue = averagesArray[i];
                minValueIndex = i;
            }
        }
        return arrays[minValueIndex]; //return the lowest average array from the main array.
    }

    public static ArrayList<String> analyzingWeatherData(int[][] arrays) {
        ArrayList<String> analyzingResult = new ArrayList<>();
        int maxValue = arrays[0][0];
        int minValue = arrays[0][0];

        for (int[] ints : arrays) {            //
            for (int anInt : ints) {          //
                if (anInt < minValue) {      // finds a min value
                    minValue = anInt;       //

                }
            }
        }

        analyzingResult.add("minimum value: "+minValue);

        for (int[] array : arrays) {            //
            for (int i : array) {              //
                if (i > maxValue) {           // finds a max value
                    maxValue = i;            //

                }
            }
        }

        analyzingResult.add("maximum value: "+maxValue);

        HashSet<Integer> weatherData = new HashSet<>(); //add the values of the 2d array to the HashSet
        for (int[] weekArr : arrays) {
            for (int data : weekArr) {
                weatherData.add(data);
            }

        }

        for (int i = minValue; i <maxValue ; i++) {
            if (!weatherData.contains(i)){              //find the temperatures that not shown in 2d array.
                analyzingResult.add("Never saw temperature: "+i);
            }
        }

        return analyzingResult; //return the arraylist of results.
    }

    public static String tally(ArrayList<String> votesArr){
        String winner="";
        HashMap<String,Integer> nameVoteMap = new HashMap<>();//make a map for the arraylist view the name and votes.

        for (String element : votesArr) {
            if (nameVoteMap.containsKey(element)) {
                nameVoteMap.put(element, nameVoteMap.get(element) + 1);//if element duplicated add one to votes.
            } else {
                nameVoteMap.put(element, 1);
            }
        }
        int maxVotes=0;
        for(String name : nameVoteMap.keySet()) {
            if(nameVoteMap.get(name)>maxVotes){   //find the maximum value of votes and the winner.
                maxVotes=nameVoteMap.get(name);
                winner=name;
            }
        }

        System.out.println(nameVoteMap);
        return winner; //return the winner.
    }

}